
http:
  routers:

    flow:
      rule: Host(`flow.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/flow`) ) || Host(`flow.localhost`)
      service: flow
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    flow-https:
      rule: Host(`flow.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/flow`) ) || Host(`flow.localhost`)
      service: flow
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    fastapi:
      rule: Host(`api.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: fastapi
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    fastapi-https:
      rule: Host(`api.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: fastapi
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    openobserve:
      rule: Host(`openobserve.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: openobserve
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages

    openobserve-https:
      rule: Host(`openobserve.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: openobserve
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    openobserve-grpc:
      rule: Host(`openobserve-grpc.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: openobserve-grpc
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    openobserve-grpc-https:
      rule: Host(`openobserve-grpc.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: openobserve-grpc
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    keycloak:
      rule: Host(`auth.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: keycloak
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    keycloak-https:
      rule: Host(`auth.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: keycloak
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    keycloakadmin:
      rule: Host(`keycloak.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: keycloak
      entrypoints:
        - web
      middlewares:
        - keycloakadminserviceheaders
        - error-pages
    keycloakadmin-https:
      rule: Host(`keycloak.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/api`) ) || Host(`api.localhost`)
      service: keycloak
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - keycloakadminserviceheaders
        - error-pages

    files:
      rule: Host(`files.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/files`) ) || Host(`files.localhost`)
      service: files
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    files-https:
      rule: Host(`files.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/files`) ) || Host(`files.localhost`)
      service: files
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    postgreadmin:
      rule: Host(`pgadmin.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/pgadmin`) ) || Host(`pgadmin.localhost`)
      service: postgreadmin
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    postgreadmin-https:
      rule: Host(`pgadmin.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/pgadmin`) ) || Host(`pgadmin.localhost`)
      service: postgreadmin
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    bpmn:
      rule: Host(`bpmn.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/bpmn`) ) || Host(`bpmn.localhost`)
      service: bpmn
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    bpmn-https:
      rule: Host(`bpmn.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/bpmn`) ) || Host(`bpmn.localhost`)
      service: bpmn
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    nginx:
      rule: Host(`nginx.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/nginx`) ) || Host(`nginx.localhost`)
      service: nginx
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    nginx-https:
      rule: Host(`nginx.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/nginx`) ) || Host(`nginx.localhost`)
      service: nginx
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages


    tms:
      rule: Host(`tms.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/tms`) ) || Host(`tms.localhost`)
      service: tms
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    tmshttps:
      rule: Host(`tms.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/tms`) ) || Host(`tms.localhost`)
      service: tms
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    jupyterlab:
      rule: Host(`jupyterlab.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/nginx`) ) || Host(`nginx.localhost`)
      service: jupyterlab
      entrypoints:
        - web
      middlewares:
        - error-pages
        - serviceheaders
        - error-pages
    jupyterlab-https:
      rule: Host(`jupyterlab.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/nginx`) ) || Host(`nginx.localhost`)
      service: jupyterlab
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - error-pages
        - serviceheaders
        - error-pages

    widgetdev:
      rule: Host(`widgetdev.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/flow`) ) || Host(`flow.localhost`)
      service: widgetdev
      entrypoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages
    widgetdev-https:
      rule: Host(`widgetdev.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/flow`) ) || Host(`flow.localhost`)
      service: widgetdev
      entrypoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages


    traefikdashboard:
      rule: Host(`traefik.typerefinery.localhost`)
      service: api@internal
      entrypoints: web
      middlewares:
        - error-pages

    error-router:
      rule: HostRegexp(`{host:.+}`)
      priority: 1
      entryPoints:
        - web
      service: noop@internal
      middlewares:
        - error-pages

    error-router-https:
      rule: HostRegexp(`{host:.+}`)
      priority: 1
      entryPoints:
        - websecure
      service: noop@internal
      middlewares:
        - error-pages
      tls: true

    # http-catchall:
    #     # attached only to web entryPoint
    #     entryPoints:
    #       - "web"
    #       - "websecure"
    #     # catchall rule
    #     rule: "PathPrefix(`/`)"
    #     service: unavailable
    #     # lowest possible priority
    #     # evaluated when no other router is matched
    #     priority: 1
    #     middlewares:
    #       - tocustom404

    # http-catchall:
    #   rule: "HostRegexp(`{host:.+}`)"
    #   entryPoints:
    #     - web
    #   service: noop@internal

    cms:
      rule: Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) || Host(`cms.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/cms`) ) || Host(`cms.localhost`)
      # rule: "Host(`cms.user.typerefinery.ai`)"
      entryPoints:
        - web
      service: cms
      middlewares:
        # - stripprefix-cms
        # - replacepath-cms
        - serviceheaders
        - error-pages
    cms-https:
      rule: Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) || Host(`cms.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/cms`) ) || Host(`cms.localhost`)
      # rule: "Host(`cms.user.typerefinery.ai`)"
      entryPoints:
        - websecure
      service: cms
      tls: true
      middlewares:
        # - stripprefix-cms
        # - replacepath-cms
        - serviceheaders
        - error-pages

    cacao-roaster:
      rule: Host(`cacao-roaster.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/cacao-roaster`) ) || Host(`cacao-roaster.localhost`)
      service: cacao-roaster
      entryPoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages

    cacao-roaster-https:
      rule: Host(`cacao-roaster.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/cacao-roaster`) ) || Host(`cacao-roaster.localhost`)
      service: cacao-roaster
      entryPoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

    soarca:
      rule: Host(`soarca.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/soarca`) ) || Host(`soarca.localhost`)
      service: soarca
      entryPoints:
        - web
      middlewares:
        - serviceheaders
        - error-pages

    soarca-https:
      rule: Host(`soarca.typerefinery.localhost`)
      # rule: ( Host(`{{ env "TRAEFIK_HOST_DOMAIN" }}`) && PathPrefix(`/soarca`) ) || Host(`soarca.localhost`)
      service: soarca
      entryPoints:
        - websecure
      tls: true
      middlewares:
        - serviceheaders
        - error-pages

  middlewares:
    default:
      chain:
        middlewares:
          # - redirect-to-https
          - error-pages

    error-pages:
      errors:
        query: "/_errors_/{status}.html"
        service: nginx
        status:
          - "400-599"
          # - "403-404"
          # - "500"
          # - "503"

    tocustom404:
      redirectregex:
        regex: ^(.*)
        replacement: https://nginx.typerefinery.localhost:8101/_errors_/404.html

    # cors
    serviceheaders:
      headers:
        accessControlAllowCredentials: true
        # accesscontrolalloworigin: "*"
        accesscontrolalloworiginlist: "*"
        # accesscontrolalloworiginlist: "https://cms.typerefinery.localhost:8101, https://flow.typerefinery.localhost:8101, https://api.typerefinery.localhost:8101, http://cms.typerefinery.localhost:8101, http://flow.typerefinery.localhost:8101, http://openobserve.typerefinery.localhost:8101"
        accesscontrolallowmethods: "*"
        accesscontrolallowheaders: "*"
        accessControlExposeHeaders: "*"
        accesscontrolmaxage: 100
        addvaryheader: true
        # contentsecuritypolicy: "default-src 'self' https://flow.typerefinery.localhost:8101/ ; img-src 'self'; script-src 'self'; style-src 'self'; connect-src 'self'; font-src 'self'; frame-src 'self'; object-src 'self'; media-src 'self'; child-src 'self'; form-action 'self'; frame-ancestors 'self'; base-uri 'self'; manifest-src 'self'; worker-src 'self'; prefetch-src 'self';"
        # contentsecuritypolicy: "default-src 'self' *.typerefinery.localhost; img-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self'; font-src 'self'; frame-src 'self'; object-src 'self'; media-src 'self'; child-src 'self'; form-action 'self'; frame-ancestors 'self'; base-uri 'self'; manifest-src 'self'; worker-src 'self';"
        # contentsecuritypolicy: "default-src 'self' https://*.typerefinery.localhost:8101 http://localhost:* https://raw.githubusercontent.com https://*.github.io; frame-src 'self' https://*.typerefinery.localhost:8101 https://*.github.io;  img-src 'self' * data: ; style-src 'self' 'unsafe-inline'; connect-src 'self' https://*.typerefinery.localhost:8101 wss://tms.typerefinery.localhost:8101; "
        # contentsecuritypolicy: ";"
        customRequestHeaders:
          Access-Control-Allow-Origin: "*"
        customResponseHeaders:
          Access-Control-Allow-Origin: "*"

        #     Content-Security-Policy-Report-Only: >-
        #       connect-src self;
        #       default-src none;
        #       font-src self;
        #       img-src self;
        #       script-src self;
        #       style-src self inline-unsafe;

    # scp
    servicescp:
      headers:
        contentsecuritypolicy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; connect-src 'self'; font-src 'self'; frame-src 'self'; object-src 'self'; media-src 'self'; child-src 'self'; form-action 'self'; frame-ancestors 'self'; base-uri 'self'; manifest-src 'self'; worker-src 'self'; prefetch-src 'self';"

    keycloakadminserviceheaders:
      headers:
        accesscontrolalloworiginlist: "https://keycloak.typerefinery.localhost, https://auth.typerefinery.localhost"
        accesscontrolallowmethods: "GET, POST, PUT, DELETE, OPTIONS"
        accesscontrolallowheaders: "*"
        contentsecuritypolicy: ";"
        # customResponseHeaders:
        #     Content-Security-Policy-Report-Only: >-
        #       connect-src self;
        #       default-src none;
        #       font-src self;
        #       img-src self;
        #       script-src self;
        #       style-src self inline-unsafe;

    # Redirect to https
    redirect-to-https:
      redirectScheme:
        scheme: https
        permanent: true

    replacepath-cms:
      replacePath:
        path: "/cms"

    stripprefix-cms:
      stripPrefix:
        prefixes:
          - "/cms"

    stripprefix-flow:
      stripPrefix:
        prefixes:
          - "/flow"

    stripprefix-nginx:
      stripPrefix:
        prefixes:
          - "/nginx"

    stripprefix-traefik:
      stripPrefix:
        prefixes:
          - "/traefik"

    # CMS Authentication
    cms-auth:
      forwardAuth:
        address: '{{ env "CMS_URL_AUTH" }}'
        trustForwardHeader: true
        authResponseHeaders:
          - "Websight-Token"
        authRequestHeaders:
          - "Websight-Token"

  services:
    # Service that will always answer a 503 Service Unavailable response
    unavailable:
      loadBalancer:
        servers: {}

    cms:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "CMS_URL" }}'
    keycloak:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "KEYCLOAK_URL" }}'
    fastapi:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "API_URL" }}'

    openobserve:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "OPENOBSERVE_URL" }}'

    openobserve-grpc:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "OPENOBSERVE_URL_GRPC" }}'

    flow:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "FLOW_HOST_URL" }}'
    tms:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "MESSAGESERVICE_URL" }}'
        sticky:
          cookie: true

    nginx:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "NGINX_URL" }}'

    postgreadmin:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "PGADMIN_URL" }}'

    files:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "FILES_URL" }}'

    bpmn:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "BPMN_URL" }}'

    jupyterlab:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "JUPYTERLAB_URL" }}'

    widgetdev:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "TRAEFIK_LOCAL_WIDGETDEV_URL" }}'

    cacao-roaster:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "COCAO_ROASTER_URL" }}'

    soarca:
      loadBalancer:
        passHostHeader: true
        servers:
          - url: '{{ env "SOARCA_URL" }}'

tcp:
  services:
    mongo:
      loadBalancer:
        servers:
          - port: '{{ env "MONGO_PORT" }}'
    typedb:
      loadBalancer:
        servers:
          - port: '{{ env "TYPEDB_PORT" }}'

  routers:
    mongo:
      rule: HostSNI(`*`)
      entrypoints: mongo
      service: mongo
      middlewares: tcp-localhost-ip-whitelist
    typedb:
      rule: HostSNI(`*`)
      entrypoints: typedb
      service: typedb
      middlewares: tcp-localhost-ip-whitelist

  middlewares:
    tcp-localhost-ip-whitelist:
      ipwhitelist:
        sourcerange: 127.0.0.0/1


tls:
  certificates:
    - certFile: {{env "CERT_FILE"}}
      keyFile: {{env "CERT_KEY"}}

{
	"variables": {},
	"f1h7of001eo51d": {
		"paused": false,
		"id": "f1h7of001eo51d",
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1763.9698638916016,
				"y": 121.95600891113281,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 838.9582672119141,
				"y": 308.8888854980469,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 555.9374542236328,
				"y": 166.875,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\n\"fielda\":\"aa\"\n}",
					"restart": false
				},
				"x": 320.98377990722656,
				"y": 654.9884033203125,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1015.0000152587891,
				"y": 633.9930419921875,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"origin": "https://flow.typerefinery.localhost:8101",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"size": 53277,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7of002eo50d": {
		"paused": false,
		"id": "f1h7of002eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/components/widgets/security/stix/_jcr_content/rootcontainer/main/stix",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Stix flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "stix_a327cba72a7b465a95e9e976c0b921ff",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "stix_a327cba72a7b465a95e9e976c0b921ff",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"type\":\"bundle\",\"id\":\"bundle--9f0725cb-4bc3-47c3-aba6-99cb97ba4f52\",\"spec_version\":\"2.0\",\"objects\":[{\"type\":\"marking-definition\",\"id\":\"marking-definition--dc1b5371-1918-4e57-93f2-25d1d78d983f\",\"created\":\"2017-07-18T22:00:30.404Z\",\"definition_type\":\"statement\",\"definition\":{\"statement\":\"Copyright 2010, Damballa, Inc  All Rights Reserved\"}},{\"type\":\"report\",\"id\":\"report--c6c7ebc4-3f65-4375-b22d-313e894ab3d5\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"IMDDOS Botnet\",\"labels\":[\"threat-report\"],\"description\":\"The newly-uncovered IMDDOS Botnet is a commercial DDOS service hosted in China.\",\"published\":\"2010-09-13T00:00:00.000Z\",\"object_refs\":[\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\",\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\"],\"object_marking_refs\":[\"marking-definition--dc1b5371-1918-4e57-93f2-25d1d78d983f\"],\"external_references\":[{\"source_name\":\"Damballa, Inc.\",\"url\":\"https://www.coresecurity.com/system/files/publications/2017/03/Damballa_Report_IMDDOS.pdf\",\"hashes\":{\"SHA-1\":\"4e0f4197d6d61f52f80a5560d78af599a37277c0\"}}]},{\"type\":\"malware\",\"id\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"IMDDOS\",\"labels\":[\"bot\",\"ddos\"],\"description\":\"Once infected with this malware, a host becomes part of the IMDDOS Botnet\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}]},{\"type\":\"threat-actor\",\"id\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"(Unnamed) IMDDOS Threat Actor\",\"labels\":[\"criminal\"]},{\"type\":\"indicator\",\"id\":\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"created\":\"2017-07-18T22:00:30.406Z\",\"modified\":\"2017-07-18T22:00:30.406Z\",\"name\":\"IMDDOS THLD\",\"labels\":[\"malicious-activity\"],\"description\":\"References to this domain are indicative of the presence of the IMDDOS malware in the environment\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[ domain-name:value = 'imddos.my03.com' ]\"},{\"type\":\"indicator\",\"id\":\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"created\":\"2017-07-18T22:00:30.406Z\",\"modified\":\"2017-07-18T22:00:30.406Z\",\"name\":\"IMDDOS THLD Traffic\",\"labels\":[\"malicious-activity\"],\"description\":\"Traffic to this domain indicates the source host is infected with IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[ network-traffic:dst_ref.type = 'domain-name' AND network-traffic:dst_ref.value = 'imddos.my03.com' AND network-traffic:dst_port = 9090 ]\"},{\"type\":\"indicator\",\"id\":\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"created\":\"2017-07-18T22:00:30.407Z\",\"modified\":\"2017-07-18T22:00:30.407Z\",\"name\":\"IMDDOS Infected Host\",\"labels\":[\"malicious-activity\"],\"description\":\"Presence of this registry key on a host indicates it is infected with the IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[windows-registry-key:key LIKE 'HKEY_LOCAL_MACHINE\\\\\\\\System\\\\\\\\CurrentControlSet\\\\\\\\Services\\\\\\\\SafePrec%' ]\"},{\"type\":\"indicator\",\"id\":\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\",\"created\":\"2017-07-18T22:00:30.407Z\",\"modified\":\"2017-07-18T22:00:30.407Z\",\"name\":\"IMDDOS C2 Traffic\",\"labels\":[\"malicious-activity\"],\"description\":\"Traffic to these domains indicates that the source host is under the control of the IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"control\"}],\"pattern\":\"[ network-traffic:dst_ref.type = 'domain-name' AND network-traffic:dst_ref.value IN ('dns.ddos.im', 'win2003ddos.3322.org', 'woshindi.3322.org', 'pk518.3322.org', 'huanjue6369029.3322.org', 'qq603535.3322.org', 'qq188588.3322.org', 'hjff.3322.org', '198600.3322.org', 'ankankan.3322.org', 'yinn.3322.org') ]\"},{\"type\":\"relationship\",\"id\":\"relationship--ff918b21-2d4e-4e78-8ed8-417302195f0b\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--0276f9d9-7679-4128-aa5a-dda8cd6518b4\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--8984fb15-5bff-4ba2-bf2e-c5099a2afea0\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--5b15d307-6751-4e95-a60f-f31cd0d250e1\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--1cef2734-91d2-4acb-9e4e-cda56ead4770\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"located-at\",\"source_ref\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"target_ref\":\"location--07608992-927e-434c-9cbd-bf45274290a0\"},{\"type\":\"relationship\",\"id\":\"relationship--80f31be7-1377-4143-86e9-3f9037d072ad\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"uses\",\"source_ref\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"}]}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"topic": {
										"type": "string",
										"$$ID": "topic",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"origin": "https://flow.typerefinery.localhost:8101",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"size": 45760,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7of003eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/forms/identity1/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/identity1/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/identity1/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/identity1/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/identity1/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of003eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53317
	},
	"f1h7of004eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/_jcr_content/rootcontainer/container1/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/_jcr_content/rootcontainer/container1/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/_jcr_content/rootcontainer/container1/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/_jcr_content/rootcontainer/container1/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/_jcr_content/rootcontainer/container1/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of004eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53347
	},
	"f1h7of005eo51d": {
		"paused": false,
		"id": "f1h7of005eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/components/content/table/_jcr_content/rootcontainer/main/container/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_6a056ceba2fa473e89c528da67c684f1",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_6a056ceba2fa473e89c528da67c684f1",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"origin": "https://flow.typerefinery.localhost:8101",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"size": 40654,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7of006eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/tasks/_jcr_content/rootcontainer/container1/form1",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tasks/_jcr_content/rootcontainer/container1/form1/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tasks/_jcr_content/rootcontainer/container1/form1/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tasks/_jcr_content/rootcontainer/container1/form1/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tasks/_jcr_content/rootcontainer/container1/form1/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of006eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53332
	},
	"f1h7of007eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/forms/create-user/_jcr_content/rootcontainer/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/create-user/_jcr_content/rootcontainer/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/create-user/_jcr_content/rootcontainer/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/create-user/_jcr_content/rootcontainer/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/create-user/_jcr_content/rootcontainer/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of007eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53302
	},
	"f1h7of008eo50d": {
		"paused": false,
		"id": "f1h7of008eo50d",
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/components/forms/_jcr_content/rootcontainer/container/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>",
			"typerefinery_api_python_algorithm": "<script total>\r\n\r\n\texports.id = 'typerefinery_api_python_algorithm';\r\n\texports.name = 'API Python Algorithm';\r\n\texports.icon = 'fa fa-code';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '4';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, algorithm: '', algorithmrequirements: 'argparse loguru', endpoint: 'http://127.0.0.1:8000/algorithm', jyputerid: \"\" };\r\n\texports.inputs = [{ id: 'config', name: 'Config' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'payload', name: 'Payload' }];\r\n\r\n\texports.meta = { settingswidth: 1200 };\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tconfig.jyputerid = instance.id;\r\n\t\tvar fn;\r\n\t\tvar values = {};\r\n\t\tvar refresh = function() {\r\n\r\n\t\t\tvar inputs = {};\r\n\r\n\t\t\tfor (let key in instance.main.meta.flow) {\r\n\t\t\t\tlet m = instance.main.meta.flow[key];\r\n\t\t\t\tif (m.connections) {\r\n\t\t\t\t\tfor (let conn in m.connections) {\r\n\t\t\t\t\t\tfor (let c of m.connections[conn]) {\r\n\t\t\t\t\t\t\tif (c.id === instance.id)\r\n\t\t\t\t\t\t\t\tinputs[c.index] = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tinstance.status({ inputs: Object.keys(inputs) });\r\n\r\n\t\t};\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t// Getting endpoint from the user\r\n\t\t\tconst endpointData = {\r\n\t\t\t\t\tendpoint: config.endpoint,\r\n\t\t\t}\r\n\r\n\t\t\tvar payload = {\r\n\t\t\t\t\"algorithm\": {\r\n\t\t\t\t\t\"source\": config.algorithm,\r\n\t\t\t\t\t\"requirements\": config.algorithmrequirements.split(' ').join('\\n'),\r\n\t\t\t\t\t\"output\": 'output'\r\n\t\t\t\t},\r\n\t\t\t\t\"config\": $.data || {}\r\n\t\t\t};\r\n\t\t\t$.send('payload', payload);\r\n\t\t\tlet options = {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Content-Type':\r\n\t\t\t\t\t'application/json;charset=utf-8'\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(payload)\r\n\t\t\t}\r\n\r\n\t\t\t// Sending request to get Data\r\n\t\t\tlet fetchRes = fetch(endpointData.endpoint,options);\r\n\t\t\tfetchRes.then(res =>res.json())\r\n\t\t\t\t.then(d => { $.send('output', d) })\r\n\t\t\t\t.catch(err => { $.send('output', err) })\r\n\t\t};\r\n\r\n\t\tinstance.close = function() {\r\n\t\t\tfn = null;\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\t\tinstance.refresh = refresh;\r\n\t\trefresh();\r\n\t};\r\n</script>\r\n<readme>\r\n\tRun a node and edges algorithm on a TypeRefinery database.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.endpoint__required:1\" class=\"m\">Endpont</div>\r\n\t\t<div data---=\"input__?.algorithmrequirements__text:1\" class=\"m\">Requirements (space separated)</div>\r\n\t\t<div class=\"ui-input-label\">Algorithm:</div>\r\n\t\t<div data---=\"codemirror__?.algorithm__type:python;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\r\n\t</div>\r\n</settings>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<!--div class=\"padding\">\r\n\t\t<button class=\"exec\">Edit</button>\r\n\t</div-->\r\n</body>\r\n\r\n\r\n<script>\r\n\r\n\tvar newNotebook = {\r\n\t\t\"name\": \"aaaa1.ipynb\",\r\n\t\t\"path\": \"aaaa1.ipynb\",\r\n\t\t\"content\": {\r\n\t\t\t\"cells\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"cell_type\": \"code\",\r\n\t\t\t\t\t\"metadata\": {\r\n\t\t\t\t\t\t\"trusted\": true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"outputs\": [],\r\n\t\t\t\t\t\"source\": \"\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"cell_type\": \"code\",\r\n\t\t\t\t\t\"metadata\": {\r\n\t\t\t\t\t\t\"trusted\": true\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"outputs\": [],\r\n\t\t\t\t\t\"source\": \"if __name__ == '__main__':\\n  main(\\\"ilmp03pfy.input\\\",\\\"ilmp03pfy.output\\\")\"\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t],\r\n\t\t\t\"metadata\": {\r\n\t\t\t\t\"kernelspec\": {\r\n\t\t\t\t\t\"display_name\": \"Python 3 (ipykernel)\",\r\n\t\t\t\t\t\"language\": \"python\",\r\n\t\t\t\t\t\"name\": \"python3\"\r\n\t\t\t\t},\r\n\t\t\t\t\"language_info\": {\r\n\t\t\t\t\t\"codemirror_mode\": {\r\n\t\t\t\t\t\t\"name\": \"ipython\",\r\n\t\t\t\t\t\t\"version\": 3\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"file_extension\": \".py\",\r\n\t\t\t\t\t\"mimetype\": \"text/x-python\",\r\n\t\t\t\t\t\"name\": \"python\",\r\n\t\t\t\t\t\"nbconvert_exporter\": \"python\",\r\n\t\t\t\t\t\"pygments_lexer\": \"ipython3\",\r\n\t\t\t\t\t\"version\": \"3.10.0\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"nbformat\": 4,\r\n\t\t\t\"nbformat_minor\": 5\r\n\t\t},\r\n\t\t\"type\": \"notebook\"\r\n\t};\r\n\r\n\tTOUCH(function(exports, reinit) {\r\n\t\tif (!reinit) {\r\n\t\t\texports.element.on('click', 'button', function() {\r\n\t\t\t\tvar id = exports.config.jyputerid || '_blank';\r\n\t\t\t\tvar name = `${id}.ipynb`;\r\n\t\t\t\tvar host = \"https://jupyterlab.typerefinery.localhost:8101\";\r\n\t\t\t\t//var host = \"http://localhost:8888\";\r\n\t\t\t\tvar api_url =  `${host}/api/contents/${name}`;\r\n\t\t\t\tvar open_url =  `${host}/lab/tree/${name}`;\r\n\t\t\t\tvar createPayload = Object.assign({}, newNotebook);\r\n\t\t\t\tcreatePayload.name = name;\r\n\t\t\t\tcreatePayload.path = name;\r\n\t\t\t\tcreatePayload.content.cells[0].source = exports.config.algorithm;\r\n\t\t\t\tconsole.log(createPayload);\r\n\t\t\t\tconsole.log(JSON.stringify(createPayload));\r\n\t\t\t\t$.ajax({\r\n\t\t\t\t\turl: api_url,\r\n\t\t\t\t\ttype: 'PUT',\r\n\t\t\t\t\tdataType : \"json\",\r\n\t\t\t\t\tdata: JSON.stringify(createPayload),\r\n\t\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\t\tsuccess: function(data) {\r\n\t\t\t\t\t\tconsole.log(\"success\");\r\n\t\t\t\t\t\t//play with data\r\n\t\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t\t\twindow.open(open_url,id);\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function (xhr, ajaxOptions, thrownError) {\r\n\t\t\t\t\t\tconsole.log(\"error\");\r\n\t\t\t\t\t\tconsole.log(xhr.status);\r\n\t\t\t\t\t\tconsole.log(thrownError);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcomplete: function (xhr, textStatus) {\r\n\t\t\t\t\t\tconsole.log(\"complete\");\r\n\t\t\t\t\t\tconsole.log(xhr.status);\r\n\t\t\t\t\t\tconsole.log(textStatus);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstatusCode: {\r\n\t\t\t\t\t\t400: function() {\r\n\t\t\t\t\t\t\tconsole.log(\"statusCode\");\r\n\t\t\t\t\t\t\tconsole.log(\"bad request\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n  \t\t\t\tvar headers1 = {'ContentType': 'application/json'};\r\n\r\n\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n</script>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 256.94444274902344,
				"y": 47.92823791503906,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/_jcr_content/rootcontainer/container/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/_jcr_content/rootcontainer/container/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/_jcr_content/rootcontainer/container/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/_jcr_content/rootcontainer/container/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"origin": "https://flow.typerefinery.localhost:8101",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"size": 61182,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7of009eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/info/_jcr_content/rootcontainer/container1/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of009eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53417
	},
	"f1h7of010eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/forms/test/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/forms/test/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/forms/test/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/forms/test/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/forms/test/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of010eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53242
	},
	"f1h7of011eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form_1",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form_1/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form_1/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form_1/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/composite/_jcr_content/rootcontainer/main/form_1/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of011eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53332
	},
	"f1h7of012eo50d": {
		"paused": false,
		"id": "f1h7of012eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/artifacts/_jcr_content/rootcontainer/container1/form/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_c712cd587344499eba66af31cd3f18c7",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_c712cd587344499eba66af31cd3f18c7",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"size": 40604,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7of013eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/components/forms/forms-test/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/forms-test/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/forms-test/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/forms-test/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/components/forms/forms-test/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of013eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53327
	},
	"f1h7of014eo50d": {
		"paused": false,
		"id": "f1h7of014eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/tags/_jcr_content/rootcontainer/container1/form/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_2c7a005e18b646faa25f5ec11d45d3c8",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_2c7a005e18b646faa25f5ec11d45d3c8",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"size": 40599,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7of015eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/info/_jcr_content/rootcontainer/container1/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/info/_jcr_content/rootcontainer/container1/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:39:12.055Z",
		"id": "f1h7of015eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53322
	},
	"f1h7og001eo51d": {
		"paused": false,
		"id": "f1h7og001eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/notes/_jcr_content/rootcontainer/container1/container/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_b9913127a29d45c2a536c2bdc9a50d4f",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_b9913127a29d45c2a536c2bdc9a50d4f",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40624,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og002eo50d": {
		"paused": false,
		"id": "f1h7og002eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/tasks/_jcr_content/rootcontainer/container1/form1/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_ab6bdfd982824dff99ff51f62f274afa",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_ab6bdfd982824dff99ff51f62f274afa",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40601,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og003eo51d": {
		"paused": false,
		"id": "f1h7og003eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container3/container3_1/chart",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Chart flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "chart_2f90a683f46142deb6a4925459c0d7e1",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "chart_2f90a683f46142deb6a4925459c0d7e1",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"data\":\"sample\",\"topic\":\"sampleA\"}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 38839,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og004eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/_jcr_content/rootcontainer/container1/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/_jcr_content/rootcontainer/container1/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/_jcr_content/rootcontainer/container1/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/_jcr_content/rootcontainer/container1/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/_jcr_content/rootcontainer/container1/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og004eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53392
	},
	"f1h7og005eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/artifacts/_jcr_content/rootcontainer/container1/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/artifacts/_jcr_content/rootcontainer/container1/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/artifacts/_jcr_content/rootcontainer/container1/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/artifacts/_jcr_content/rootcontainer/container1/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/artifacts/_jcr_content/rootcontainer/container1/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og005eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53347
	},
	"f1h7og006eo50d": {
		"paused": false,
		"id": "f1h7og006eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/tasks/_jcr_content/rootcontainer/container1/container/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_efb58af3970f4c679fcde6b642b70fde",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_efb58af3970f4c679fcde6b642b70fde",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40624,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og007eo51d": {
		"paused": false,
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/test/_jcr_content/rootcontainer/stix",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Stix flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "stix_c250212cb9aa404385b5e688782d184e",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "stix_c250212cb9aa404385b5e688782d184e",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"type\":\"bundle\",\"id\":\"bundle--9f0725cb-4bc3-47c3-aba6-99cb97ba4f52\",\"spec_version\":\"2.0\",\"objects\":[{\"type\":\"marking-definition\",\"id\":\"marking-definition--dc1b5371-1918-4e57-93f2-25d1d78d983f\",\"created\":\"2017-07-18T22:00:30.404Z\",\"definition_type\":\"statement\",\"definition\":{\"statement\":\"Copyright 2010, Damballa, Inc  All Rights Reserved\"}},{\"type\":\"report\",\"id\":\"report--c6c7ebc4-3f65-4375-b22d-313e894ab3d5\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"IMDDOS Botnet\",\"labels\":[\"threat-report\"],\"description\":\"The newly-uncovered IMDDOS Botnet is a commercial DDOS service hosted in China.\",\"published\":\"2010-09-13T00:00:00.000Z\",\"object_refs\":[\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\",\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\"],\"object_marking_refs\":[\"marking-definition--dc1b5371-1918-4e57-93f2-25d1d78d983f\"],\"external_references\":[{\"source_name\":\"Damballa, Inc.\",\"url\":\"https://www.coresecurity.com/system/files/publications/2017/03/Damballa_Report_IMDDOS.pdf\",\"hashes\":{\"SHA-1\":\"4e0f4197d6d61f52f80a5560d78af599a37277c0\"}}]},{\"type\":\"malware\",\"id\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"IMDDOS\",\"labels\":[\"bot\",\"ddos\"],\"description\":\"Once infected with this malware, a host becomes part of the IMDDOS Botnet\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}]},{\"type\":\"threat-actor\",\"id\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"(Unnamed) IMDDOS Threat Actor\",\"labels\":[\"criminal\"]},{\"type\":\"indicator\",\"id\":\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"created\":\"2017-07-18T22:00:30.406Z\",\"modified\":\"2017-07-18T22:00:30.406Z\",\"name\":\"IMDDOS THLD\",\"labels\":[\"malicious-activity\"],\"description\":\"References to this domain are indicative of the presence of the IMDDOS malware in the environment\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[ domain-name:value = 'imddos.my03.com' ]\"},{\"type\":\"indicator\",\"id\":\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"created\":\"2017-07-18T22:00:30.406Z\",\"modified\":\"2017-07-18T22:00:30.406Z\",\"name\":\"IMDDOS THLD Traffic\",\"labels\":[\"malicious-activity\"],\"description\":\"Traffic to this domain indicates the source host is infected with IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[ network-traffic:dst_ref.type = 'domain-name' AND network-traffic:dst_ref.value = 'imddos.my03.com' AND network-traffic:dst_port = 9090 ]\"},{\"type\":\"indicator\",\"id\":\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"created\":\"2017-07-18T22:00:30.407Z\",\"modified\":\"2017-07-18T22:00:30.407Z\",\"name\":\"IMDDOS Infected Host\",\"labels\":[\"malicious-activity\"],\"description\":\"Presence of this registry key on a host indicates it is infected with the IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[windows-registry-key:key LIKE 'HKEY_LOCAL_MACHINE\\\\\\\\System\\\\\\\\CurrentControlSet\\\\\\\\Services\\\\\\\\SafePrec%' ]\"},{\"type\":\"indicator\",\"id\":\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\",\"created\":\"2017-07-18T22:00:30.407Z\",\"modified\":\"2017-07-18T22:00:30.407Z\",\"name\":\"IMDDOS C2 Traffic\",\"labels\":[\"malicious-activity\"],\"description\":\"Traffic to these domains indicates that the source host is under the control of the IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"control\"}],\"pattern\":\"[ network-traffic:dst_ref.type = 'domain-name' AND network-traffic:dst_ref.value IN ('dns.ddos.im', 'win2003ddos.3322.org', 'woshindi.3322.org', 'pk518.3322.org', 'huanjue6369029.3322.org', 'qq603535.3322.org', 'qq188588.3322.org', 'hjff.3322.org', '198600.3322.org', 'ankankan.3322.org', 'yinn.3322.org') ]\"},{\"type\":\"relationship\",\"id\":\"relationship--ff918b21-2d4e-4e78-8ed8-417302195f0b\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--0276f9d9-7679-4128-aa5a-dda8cd6518b4\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--8984fb15-5bff-4ba2-bf2e-c5099a2afea0\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--5b15d307-6751-4e95-a60f-f31cd0d250e1\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--1cef2734-91d2-4acb-9e4e-cda56ead4770\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"located-at\",\"source_ref\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"target_ref\":\"location--07608992-927e-434c-9cbd-bf45274290a0\"},{\"type\":\"relationship\",\"id\":\"relationship--80f31be7-1377-4143-86e9-3f9037d072ad\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"uses\",\"source_ref\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"}]}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"topic": {
										"type": "string",
										"$$ID": "topic",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"id": "f1h7og007eo51d",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 45675
	},
	"f1h7og008eo50d": {
		"paused": false,
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/observables/_jcr_content/rootcontainer/container1/container/container_1/stix",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Stix flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "stix_f1547e69ecb44da5be4531dad9458847",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "stix_f1547e69ecb44da5be4531dad9458847",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"type\":\"bundle\",\"id\":\"bundle--9f0725cb-4bc3-47c3-aba6-99cb97ba4f52\",\"spec_version\":\"2.0\",\"objects\":[{\"type\":\"marking-definition\",\"id\":\"marking-definition--dc1b5371-1918-4e57-93f2-25d1d78d983f\",\"created\":\"2017-07-18T22:00:30.404Z\",\"definition_type\":\"statement\",\"definition\":{\"statement\":\"Copyright 2010, Damballa, Inc  All Rights Reserved\"}},{\"type\":\"report\",\"id\":\"report--c6c7ebc4-3f65-4375-b22d-313e894ab3d5\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"IMDDOS Botnet\",\"labels\":[\"threat-report\"],\"description\":\"The newly-uncovered IMDDOS Botnet is a commercial DDOS service hosted in China.\",\"published\":\"2010-09-13T00:00:00.000Z\",\"object_refs\":[\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\",\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\"],\"object_marking_refs\":[\"marking-definition--dc1b5371-1918-4e57-93f2-25d1d78d983f\"],\"external_references\":[{\"source_name\":\"Damballa, Inc.\",\"url\":\"https://www.coresecurity.com/system/files/publications/2017/03/Damballa_Report_IMDDOS.pdf\",\"hashes\":{\"SHA-1\":\"4e0f4197d6d61f52f80a5560d78af599a37277c0\"}}]},{\"type\":\"malware\",\"id\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"IMDDOS\",\"labels\":[\"bot\",\"ddos\"],\"description\":\"Once infected with this malware, a host becomes part of the IMDDOS Botnet\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}]},{\"type\":\"threat-actor\",\"id\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"created\":\"2017-07-18T22:00:30.405Z\",\"modified\":\"2017-07-18T22:00:30.405Z\",\"name\":\"(Unnamed) IMDDOS Threat Actor\",\"labels\":[\"criminal\"]},{\"type\":\"indicator\",\"id\":\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"created\":\"2017-07-18T22:00:30.406Z\",\"modified\":\"2017-07-18T22:00:30.406Z\",\"name\":\"IMDDOS THLD\",\"labels\":[\"malicious-activity\"],\"description\":\"References to this domain are indicative of the presence of the IMDDOS malware in the environment\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[ domain-name:value = 'imddos.my03.com' ]\"},{\"type\":\"indicator\",\"id\":\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"created\":\"2017-07-18T22:00:30.406Z\",\"modified\":\"2017-07-18T22:00:30.406Z\",\"name\":\"IMDDOS THLD Traffic\",\"labels\":[\"malicious-activity\"],\"description\":\"Traffic to this domain indicates the source host is infected with IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[ network-traffic:dst_ref.type = 'domain-name' AND network-traffic:dst_ref.value = 'imddos.my03.com' AND network-traffic:dst_port = 9090 ]\"},{\"type\":\"indicator\",\"id\":\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"created\":\"2017-07-18T22:00:30.407Z\",\"modified\":\"2017-07-18T22:00:30.407Z\",\"name\":\"IMDDOS Infected Host\",\"labels\":[\"malicious-activity\"],\"description\":\"Presence of this registry key on a host indicates it is infected with the IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"exploit\"}],\"pattern\":\"[windows-registry-key:key LIKE 'HKEY_LOCAL_MACHINE\\\\\\\\System\\\\\\\\CurrentControlSet\\\\\\\\Services\\\\\\\\SafePrec%' ]\"},{\"type\":\"indicator\",\"id\":\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\",\"created\":\"2017-07-18T22:00:30.407Z\",\"modified\":\"2017-07-18T22:00:30.407Z\",\"name\":\"IMDDOS C2 Traffic\",\"labels\":[\"malicious-activity\"],\"description\":\"Traffic to these domains indicates that the source host is under the control of the IMDDOS malware\",\"valid_from\":\"2010-04-01T00:00:00.000Z\",\"kill_chain_phases\":[{\"kill_chain_name\":\"lockheed-martin-cyber-kill-chain\",\"phase_name\":\"control\"}],\"pattern\":\"[ network-traffic:dst_ref.type = 'domain-name' AND network-traffic:dst_ref.value IN ('dns.ddos.im', 'win2003ddos.3322.org', 'woshindi.3322.org', 'pk518.3322.org', 'huanjue6369029.3322.org', 'qq603535.3322.org', 'qq188588.3322.org', 'hjff.3322.org', '198600.3322.org', 'ankankan.3322.org', 'yinn.3322.org') ]\"},{\"type\":\"relationship\",\"id\":\"relationship--ff918b21-2d4e-4e78-8ed8-417302195f0b\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--691d06b5-aa1d-46ec-97d6-e59ef9411b8a\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--0276f9d9-7679-4128-aa5a-dda8cd6518b4\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--b2ab314f-3a97-44d4-bfca-6a9857a6fe17\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--8984fb15-5bff-4ba2-bf2e-c5099a2afea0\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--ca26195e-e3c0-4139-8e21-0af90c89bd27\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--5b15d307-6751-4e95-a60f-f31cd0d250e1\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"indicates\",\"source_ref\":\"indicator--644bc5dc-1627-4c3a-b9d8-bb2a9fa30567\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"},{\"type\":\"relationship\",\"id\":\"relationship--1cef2734-91d2-4acb-9e4e-cda56ead4770\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"located-at\",\"source_ref\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"target_ref\":\"location--07608992-927e-434c-9cbd-bf45274290a0\"},{\"type\":\"relationship\",\"id\":\"relationship--80f31be7-1377-4143-86e9-3f9037d072ad\",\"created\":\"2017-07-18T22:00:30.408Z\",\"modified\":\"2017-07-18T22:00:30.408Z\",\"relationship_type\":\"uses\",\"source_ref\":\"threat-actor--e234c322-0981-4aa4-ae03-f4037e6be83f\",\"target_ref\":\"malware--efd5ac80-79ba-45cc-9293-01460ad85303\"}]}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"topic": {
										"type": "string",
										"$$ID": "topic",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"id": "f1h7og008eo50d",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 45750
	},
	"f1h7og009eo51d": {
		"paused": false,
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container1/container1_2/ticker",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Ticker flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "ticker_bdae4837d76747c5a8c97d1005375a66",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "ticker_bdae4837d76747c5a8c97d1005375a66",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"data\":\"sample\",\"topic\":\"sampleA\"}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"topic": {
										"type": "string",
										"$$ID": "topic",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"id": "f1h7og009eo51d",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 39020
	},
	"f1h7og010eo50d": {
		"paused": false,
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container1/container1_1/ticker",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Ticker flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "ticker_4bfbcd4ce75147d3a51ad2727824a256",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "ticker_4bfbcd4ce75147d3a51ad2727824a256",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"data\":\"sample\",\"topic\":\"sampleA\"}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"topic": {
										"type": "string",
										"$$ID": "topic",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"id": "f1h7og010eo50d",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 39020
	},
	"f1h7og011eo51d": {
		"paused": false,
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container1/container1_3/ticker",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Ticker flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "ticker_5fb968a38e9a47a49bfb30f482396234",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "ticker_5fb968a38e9a47a49bfb30f482396234",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"data\":\"sample\",\"topic\":\"sampleA\"}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"topic": {
										"type": "string",
										"$$ID": "topic",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"id": "f1h7og011eo51d",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 39020
	},
	"f1h7og012eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/options/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/options/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/options/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/options/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/options/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og012eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53307
	},
	"f1h7og013eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/tags/_jcr_content/rootcontainer/container1/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tags/_jcr_content/rootcontainer/container1/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tags/_jcr_content/rootcontainer/container1/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tags/_jcr_content/rootcontainer/container1/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/tags/_jcr_content/rootcontainer/container1/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og013eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53322
	},
	"f1h7og014eo50d": {
		"paused": false,
		"id": "f1h7og014eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container3/container3_2/chart",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Chart flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "chart_eef6cb3ddb284cb8bb21277ae185dbcb",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "chart_eef6cb3ddb284cb8bb21277ae185dbcb",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"data\":\"sample\",\"topic\":\"sampleA\"}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 38839,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og015eo51d": {
		"paused": false,
		"id": "f1h7og015eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container2/chart",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Chart flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "chart_94754e8db33c4ff2b9f3e840ccebf965",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "chart_94754e8db33c4ff2b9f3e840ccebf965",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"data\":\"sample\",\"topic\":\"sampleA\"}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 38826,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og016eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/notes/_jcr_content/rootcontainer/container1/form1",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/notes/_jcr_content/rootcontainer/container1/form1/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/notes/_jcr_content/rootcontainer/container1/form1/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/notes/_jcr_content/rootcontainer/container1/form1/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/pages/notes/_jcr_content/rootcontainer/container1/form1/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og016eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53332
	},
	"f1h7og017eo51d": {
		"paused": false,
		"id": "f1h7og017eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/artifacts/_jcr_content/rootcontainer/container1/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_e0ed5bf3f99140448a23ded23b5107f8",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_e0ed5bf3f99140448a23ded23b5107f8",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40618,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og018eo50d": {
		"paused": false,
		"id": "f1h7og018eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/dashboard/_jcr_content/rootcontainer/container/flowcontainer_1/container4/map",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Map flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.ai';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.ai';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.ai\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "map_0a0592bd392548c8abc78101abb8f635",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "map_0a0592bd392548c8abc78101abb8f635",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"mapLat\":\"51.495\",\"mapLng\":\"-0.09\",\"markers\":[{\"markerLat\":\"51.497\",\"markerLng\":\"-0.09\",\"popupText\":\"Marker 1\"},{\"markerLat\":\"51.495\",\"markerLng\":\"-0.083\",\"popupText\":\"Marker 2\"}]}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 38990,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og019eo51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/forms/stix/identity/update/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/identity/update/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/identity/update/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/identity/update/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/identity/update/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og019eo51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53372
	},
	"f1h7og020eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/update/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/update/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/update/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/update/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/update/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og020eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53367
	},
	"f1h7og021eo51d": {
		"paused": false,
		"id": "f1h7og021eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/_jcr_content/rootcontainer/container1/form/container2/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_189f8a2dcd4a4182a39b32bf391e434c",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_189f8a2dcd4a4182a39b32bf391e434c",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40615,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og022eo50d": {
		"paused": false,
		"id": "f1h7og022eo50d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/notes/_jcr_content/rootcontainer/container1/form1/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_857aac175260493f9f8105eec3c0b44a",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_857aac175260493f9f8105eec3c0b44a",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40601,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og023eo51d": {
		"paused": false,
		"id": "f1h7og023eo51d",
		"reference": "#component",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/pages/incidents/incident/tags/_jcr_content/rootcontainer/container1/table",
		"icon": "fa fa-puzzle-piece",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Table flow",
		"components": {
			"pubsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcrrawbb2daXpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcrrawbb2da', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcrrawbb2daXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcrrawbb2daXpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcrrawbb2da', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcrrawbb2da'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcrrawbb2daXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <ws://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"component_flow_output": "<script total>\n\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Output name</b></div>\n\t\t<div data---=\"textarea__?.readme__monospace:1;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component sends data to a `Subscribe` component in another FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"component_flow_input": "<script total>\n\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '1';\n\texports.icon = 'fa fa-broadcast-tower';\n\texports.author = 'Total.js';\n\texports.config = { name: '', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\n\t\t\tinstance.send('data', data);\n\t\t};\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.name__required:1\" class=\"m\"><b>Input name</b></div>\n\t\t<div data---=\"input__?.readme__monospace:1;type:multiline;height:250\">Readme</div>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data from a `Publish` component from another FlowStream instance.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <b data-bind=\"CONFIG.name__text__empty\"></b>\n\t</header>\n</body>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_counter": "<script total>\n\t\n\texports.id = \"typerefinery_counter\";\n\texports.name = \"Counter\";\n\texports.icon = \"fa fa-calculator\";\n\texports.group = \"@TypeRefinery\";\n\texports.author = \"TypeRefinery.io\";\n\texports.version = \"1\";\n\t\n\texports.config = { title: exports.name, version: exports.version };\n\texports.inputs = [{ id: \"input\", name: \"Input\" }];\n\n\texports.make = function (instance, config) {\n\t\tvar count = 0;\n\n\t\tinstance.message = function ($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function (data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\t\t\n\t};\n</script>\n\n<style>\n\t.CLASS .status {\n\t\tfont-size: 35px;\n\t\tmargin: 0;\n\t\tpadding: 0 10px 10px;\n\t\tfont-weight: bold;\n\t\ttext-align: center;\n\t}\n</style>\n\n<readme>\n\tThe component counts incoming messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n\t<footer\n\t\tdata-bind=\"STATUS__text:(value || 0).format(0)\"\n\t\tclass=\"status\"\n\t></footer>\n</body>"
		},
		"design": {
			"flowtmsinput": {
				"id": "flowtmsinput",
				"config": {},
				"x": 51,
				"y": 131,
				"component": "pubsrcrrawbb2daXpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "flowtmsfilterget",
							"index": "input"
						},
						{
							"id": "ilev8w2rc",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsoutput": {
				"id": "flowtmsoutput",
				"config": {},
				"x": 1850.0001525878906,
				"y": 130,
				"component": "subsrcrrawbb2daXpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"flowoutput": {
				"id": "flowoutput",
				"config": {
					"name": "#component-name-output",
					"readme": ""
				},
				"x": 787.0000305175781,
				"y": 112,
				"note": "",
				"component": "component_flow_output",
				"connections": {},
				"template": {
					"type": "output",
					"icon": "fa fa-crosshairs",
					"group": "FlowStream",
					"name": "Output",
					"inputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowinput": {
				"id": "flowinput",
				"config": {
					"name": "#component-name-input",
					"readme": ""
				},
				"x": 1142.0000305175781,
				"y": 129,
				"component": "component_flow_input",
				"connections": {
					"data": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "input",
					"icon": "fa fa-broadcast-tower",
					"group": "FlowStream",
					"name": "Input",
					"outputs": [
						{
							"id": "data",
							"name": "Data"
						}
					]
				}
			},
			"flowtmsfilterupdate": {
				"id": "flowtmsfilterupdate",
				"config": {
					"title": "API Payload Wrap and set Topic",
					"version": "2",
					"topic": "table_2f74bfcbd7fb4a0198352f419af051d3",
					"type": "wrap",
					"topicforce": true
				},
				"x": 1494.0000305175781,
				"y": 89,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowtmsoutput",
							"index": "subscribe"
						},
						{
							"id": "ilev8wvn1",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"flowtmsfilterget": {
				"id": "flowtmsfilterget",
				"config": {
					"title": "API Payload Unwrap and Filter",
					"version": "2",
					"topic": "table_2f74bfcbd7fb4a0198352f419af051d3",
					"type": "unwrap",
					"topicforce": true
				},
				"x": 437.0000305175781,
				"y": 84,
				"component": "typerefinery_api_payload",
				"connections": {
					"output": [
						{
							"id": "flowoutput",
							"index": "data"
						},
						{
							"id": "ilev8v5ou",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "@TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilett2uxv": {
				"id": "ilett2uxv",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"columns\":[{\"field\":\"name\",\"title\":\"Name\"},{\"field\":\"age\",\"title\":\"Age\"},{\"field\":\"email\",\"title\":\"Email\"},{\"field\":\"phoneNumber\",\"title\":\"Phone Number\"},{\"field\":\"location\",\"title\":\"Location\"}],\"data\":[{\"name\":\"Peter\",\"age\":25,\"email\":\"john@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Jane Doe\",\"age\":23,\"email\":\"jane@gmail.com\",\"phoneNumber\":\"985939323\",\"location\":\"Chicago\"},{\"name\":\"Smith\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"New York\"},{\"name\":\"Henry\",\"age\":32,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Nichols\",\"age\":19,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"8784753921\",\"location\":\"Chicago\"},{\"name\":\"Max\",\"age\":10,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"3475634753\",\"location\":\"New York\"},{\"name\":\"Murphy\",\"age\":44,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"New York\"},{\"name\":\"Stokes\",\"age\":33,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"87544756332\",\"location\":\"Texas\"},{\"name\":\"Sarah\",\"age\":66,\"email\":\"sarah@gmail.com\",\"phoneNumber\":\"5787342355\",\"location\":\"Texas\"},{\"name\":\"Joe\",\"age\":20,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Chicago\"},{\"name\":\"William\",\"age\":16,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Texas\"},{\"name\":\"Peter\",\"age\":22,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"1234567890\",\"location\":\"Harvard\"},{\"name\":\"Sophia\",\"age\":24,\"email\":\"smith@gmail.com\",\"phoneNumber\":\"6743474381\",\"location\":\"Harvard\"}],\"search\":false,\"pagination\":false,\"resizable\":true}",
					"restart": false
				},
				"x": 1137.0000305175781,
				"y": 382,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "flowtmsfilterupdate",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilev8v5ou": {
				"id": "ilev8v5ou",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 826.0000305175781,
				"y": 395,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8w2rc": {
				"id": "ilev8w2rc",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 331.0000305175781,
				"y": 396,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilev8wvn1": {
				"id": "ilev8wvn1",
				"config": {
					"title": "Counter",
					"version": "1"
				},
				"x": 1853.0001525878906,
				"y": 415,
				"component": "typerefinery_counter",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "@TypeRefinery",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gldh7c51h",
					"x": 24,
					"y": 21,
					"width": 1062,
					"height": 286,
					"name": "Read message from TMS",
					"background": "rgba(97,200,59,0.3)"
				},
				{
					"id": "gldh7cktg",
					"x": 1115.0000305175781,
					"y": 20,
					"width": 989,
					"height": 278,
					"name": "Send message to TMS",
					"background": "rgba(185,38,26,0.3)"
				},
				{
					"id": "glev8mlvh",
					"x": 33,
					"y": 333,
					"width": 2101,
					"height": 350,
					"name": "Debug"
				}
			]
		},
		"variables": {},
		"sources": {
			"srcrrawbb2da": {
				"token": "typerefinery",
				"url": "ws://127.0.0.1:8112/$tms",
				"id": "srcrrawbb2da",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"topic": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "38995619161",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"size": 40613,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1h7og024eo50d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/create/_jcr_content/rootcontainer/main/form",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/create/_jcr_content/rootcontainer/main/form/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/create/_jcr_content/rootcontainer/main/form/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/create/_jcr_content/rootcontainer/main/form/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/stix/company/create/_jcr_content/rootcontainer/main/form/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2024-10-21T01:40:12.057Z",
		"id": "f1h7og024eo50d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53367
	},
	"f1imvz001id51d": {
		"paused": false,
		"id": "f1imvz001id51d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "d",
		"components": {
			"typerefinery_chatgpt": "<script total>\n\n\texports.id = 'typerefinery_chatgpt';\n\texports.name = 'ChatGPT';\n\texports.icon = 'fa fa-robot';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '1';\n\n\texports.config = { title: exports.name, version: exports.version, model: '', apikey: '', question: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Question' }];\n\texports.outputs = [{ id: 'output', name: 'Answer' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function (instance, config) {\n\n\t\tvar model;\n\t\tvar cfg;\n\n\t\tinstance.message = async function ($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!config.apikey) {\n\t\t\t\t$.send('error', 'Config is missing API key');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!config.model && !config.modeloverride) {\n\t\t\t\t$.send('error', 'Config is missing model');\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tif (!data) {\n\t\t\t\t$.send('error', 'Input text is missing: ' + data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar OPTIONS = {};\n\t\t\tvar URL = \"\";\n\t\t\tvar DATA = {};\n\t\t\tvar controller = new AbortController();\n\t\t\tvar signal = controller.signal;\n\t\t\tvar timeoutId = setTimeout(() => controller.abort(), 60000)\n\n\t\t\tconsole.log(\"sending model: \" + cfg.model);\n\t\t\tswitch (cfg.model) {\n\t\t\t\tcase 'whisper-1':\n\t\t\t\t\tvar path = $.data.path || $.data;\n\n\t\t\t\t\tcontroller = new AbortController();\n\t\t\t\t\tsignal = controller.signal;\n\t\t\t\t\ttimeoutId = setTimeout(() => controller.abort(), 60000)\n\n\t\t\t\t\tDATA = {\n\t\t\t\t\t\tmodel: cfg.model,\t\t\t\t\t\t\n\t\t\t\t\t};\n\n\t\t\t\t\tif (!messages[0].file) {\n\t\t\t\t\t\t$.send('error', 'Error: File is missing in messages[0].file.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\tformData.append('file', messages[0].file);\n\t\t\t\t\tformData.append('model', cfg.model);\n\t\t\t\t\tformData.append('language', messages[0].lang ? messages[0].lang : 'en');\n\n\t\t\t\t\tOPTIONS = {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': 'Bearer ' + cfg.apikey,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsignal: signal,\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t};\n\n\t\t\t\t\t// Sending request to get Data\n\t\t\t\t\tawait fetch(URL, OPTIONS).then(response => {\n\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\t\tconsole.log(\"response\", response.status);\n\t\t\t\t\t\t\t\tthrow new Error('Response error' + response.status);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(text => {\n\t\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tif (error.name === 'AbortError') {\n\t\t\t\t\t\t\t  console.error('Fetch aborted due to timeout');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t  console.error('Fetch error:', error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$.send('error', error);\n\t\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dall-e-3':\n\t\t\t\t\tvar path = $.data.path || $.data;\n\n\t\t\t\t\tconfig.question && messages.unshift({ role: 'system', content: config.question });\n\n\t\t\t\t\tcontroller = new AbortController();\n\t\t\t\t\tsignal = controller.signal;\n\t\t\t\t\ttimeoutId = setTimeout(() => controller.abort(), 60000)\n\n\t\t\t\t\tDATA = {\n\t\t\t\t\t\tmodel: cfg.model,\n\t\t\t\t\t\t\"prompt\": messages[0].content,\n\t\t\t\t\t\t\"n\": messages[0].count ? messages[0].count : 1,\n\t\t\t\t\t\t\"quality\": messages[0].quality ? messages[0].quality : \"standard\",\n\t\t\t\t\t\t\"size\": messages[0].size ? messages[0].size : \"1024x1024\"\n\t\t\t\t\t};\n\n\t\t\t\t\tOPTIONS = {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': 'Bearer ' + cfg.apikey,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsignal: signal,\n\t\t\t\t\t\tbody: JSON.stringify(DATA)\n\t\t\t\t\t};\n\n\t\t\t\t\tURL = (config.url ? config.url : 'https://api.openai.com/v1/images/generations');\n\n\t\t\t\t\t// Sending request to get Data\n\t\t\t\t\tawait fetch(URL, OPTIONS).then(response => {\n\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\t\tconsole.log(\"response\", response.status);\n\t\t\t\t\t\t\t\tthrow new Error('Response error' + response.status);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response.json()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tif (data && data.data) {\n\t\t\t\t\t\t\t\t$.send('output', data.data[0].url);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$.send('output', data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tif (error.name === 'AbortError') {\n\t\t\t\t\t\t\t  console.error('Fetch aborted due to timeout');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t  console.error('Fetch error:', error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$.send('error', error);\n\t\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar messages = $.data.messages || $.data;\n\n\t\t\t\t\tconsole.log(\"sending message\", messages)\n\n\t\t\t\t\tif (!(messages instanceof Array)) {\n\t\t\t\t\t\t$.send('error', 'Error: Input must be array of messages');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!messages[0] || !messages[0].role) {\n\t\t\t\t\t\t$.send('error', 'Error: Each message object must have message role attribute : user or assistant or system');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfig.question && messages.unshift({ role: 'system', content: config.question });\n\n\t\t\t\t\tcontroller = new AbortController();\n\t\t\t\t\tsignal = controller.signal;\n\t\t\t\t\ttimeoutId = setTimeout(() => controller.abort(), 60000)\n\n\t\t\t\t\tDATA = {\n\t\t\t\t\t\tmodel: cfg.model,\n\t\t\t\t\t\tmessages: messages\n\t\t\t\t\t};\n\n\t\t\t\t\tOPTIONS = {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Authorization': 'Bearer ' + cfg.apikey,\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsignal: signal,\n\t\t\t\t\t\tbody: JSON.stringify(DATA)\n\t\t\t\t\t};\n\n\t\t\t\t\tURL = (config.url ? config.url : 'https://api.openai.com/v1/chat/completions');\n\n\t\t\t\t\t// Sending request to get Data\n\t\t\t\t\tawait fetch(URL, OPTIONS).then(response => {\n\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\t\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\t\tconsole.log(\"response\", response.status);\n\t\t\t\t\t\t\t\tthrow new Error('Response error' + response.status);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response.json()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tif (data && data.choices) {\n\t\t\t\t\t\t\t\t$.send('output', data.choices[0].message.content);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tif (error.name === 'AbortError') {\n\t\t\t\t\t\t\t  console.error('Fetch aborted due to timeout');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t  console.error('Fetch error:', error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$.send('error', error);\n\t\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function () {\n\t\t\tcfg = instance.replace(config);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\n\t.CLASS .output { text-align: right }\n</style>\n\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\n\t\t<div data---=\"input__?.apikey__type:password;required:1\"><b>API Key</b></div>\n\t\t<div class=\"help\"><a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\"><i class=\"ti ti-external\"></i>Generate API key</a></div>\n\n\t\t<div data---=\"input__?.model__dirsource:dall-e-3|DALL-E,o1-preview|GPT o1,o1-mini|GPT o1-mini,gpt-4o|GPT 4o,gpt-4o-mini|GTP 4o-mini,gpt-4|GPT 4,gpt-3.5-turbo|GPT 3.5 Turbo,gpt-3.5-turbo-instruct|GPT 3.5 Turbo instruct,whisper-1|Whisper\">Model</div>\n\t\t<div data---=\"input__?.modeloverride__text\">Model Override</div>\n\n\t\t<div data---=\"input__?.url__text\">URL Override</div>\n\n\t\t<div class=\"help\">System message to set context</div>\n\t\t<div data---=\"input__?.question__height:250;type:multiline;maxlength:100000;monospace:1\">System Message</div>\n\n\t</div>\n</settings>\n\n<readme>\nThis component can talk to ChatGPT.\n\nTo use custom models and API endpoints, you can use the following fields:\n\n- Custom models can be used by providing the model name in the model override field.\n- Custom API endpoints can be used by providing the URL in the URL override field.\n\nCustome model and URL override fields will use ChatGPT model.\n\n## Input\n\nInput will depend on selected model\n\n- __CPT 3.5 Turbo__ and __CPT 4__\n```js\n\n// Object\n{\nmessages : [{ role: 'user', content: 'Text' }]\n}\n\n// or\n\n\n// Array\n[{ role: 'assistant', content: 'Text' }]\n```\n\n- __Whisper__\n```js\n\n// Object\n{\npath : 'path-to-file'\n}\n\n// or\n\n\n// String\n'path-to-file'\n```\n\n- __CPT 3.5 Turbo instruct__\n```js\n\n// Object\n{\ntext : 'your question'\n}\n\n// or\n\n\n// String\n'your question'\n```\n\n\n## Output\n\nOutput also depends on selected model\n- __CPT 3.5 Turbo__ and __CPT 4__\n```js\n'Response from assistant'\n```\n\n- __Whisper__\n```js\n\n// Object\n{\ntext : 'transcipted text'\n}\n```\n- __CPT 3.5 Turbo instruct__\n```js\n\n// String\n'Response from assistant'\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\n\t</header>\n\t<footer>\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\n\t</footer>\n</body>"
		},
		"design": {},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"origin": "https://flow.typerefinery.localhost:8101",
		"dtcreated": "2024-12-06T03:47:01.977Z",
		"size": 11349,
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false
	},
	"f1kgfn001yf51d": {
		"paused": false,
		"reference": "",
		"author": "TypeRefinery.io",
		"group": "/content/typerefinery-showcase/pages/os-triage/forms/updateincident/_jcr_content/rootcontainer/container/form1",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "Form flow",
		"components": {
			"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
			"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
			"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
			"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
			"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
		},
		"design": {
			"ile47qxlc": {
				"id": "ile47qxlc",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 246.98959350585938,
				"y": 46.979164123535156,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httppost": {
				"id": "httppost",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/updateincident/_jcr_content/rootcontainer/container/form1/*",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 48,
				"y": 88.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile47qxlc",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"httpgetresponse": {
				"id": "httpgetresponse",
				"config": {
					"type": "json",
					"code": 200
				},
				"x": 602.9687805175781,
				"y": 650.9687881469727,
				"component": "cclau23c62",
				"connections": {},
				"template": {
					"icon": "fa fa-retweet",
					"group": "REST API",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "Response"
						}
					]
				}
			},
			"httpget": {
				"id": "httpget",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/updateincident/_jcr_content/rootcontainer/container/form1/*",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 46.9375,
				"y": 770.9271011352539,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "senddata",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ile5l7th8": {
				"id": "ile5l7th8",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 770.9687805175781,
				"y": 49.895835876464844,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpput": {
				"id": "httpput",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/updateincident/_jcr_content/rootcontainer/container/form1/*",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 571.9583435058594,
				"y": 82.88541412353516,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "ile5l7th8",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"senddata": {
				"id": "senddata",
				"config": {
					"title": "Send Data",
					"version": "3",
					"random": false,
					"type": "json",
					"data": "{\"name\":\"John Smith\",\"email\":\"john.smith@gmail.com\",\"phone\":\"+61431588593\",\"dob\":\"2023-02-15\",\"id\":\"461\"}",
					"restart": false
				},
				"x": 273,
				"y": 653.0000381469727,
				"component": "typerefinery_senddata",
				"connections": {
					"output": [
						{
							"id": "httpgetresponse",
							"index": "input"
						},
						{
							"id": "iles2kvkh",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "@TypeRefinery",
					"name": "Send Data",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2kvkh": {
				"id": "iles2kvkh",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 580.0000305175781,
				"y": 764.0000381469727,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"httpdelete": {
				"id": "httpdelete",
				"config": {
					"url": "/content/typerefinery-showcase/pages/os-triage/forms/updateincident/_jcr_content/rootcontainer/container/form1/*",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"response": "json"
				},
				"x": 1096.0000305175781,
				"y": 113.00000762939453,
				"component": "c71gcc7fd3",
				"connections": {
					"output": [
						{
							"id": "iles2zvuw",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-route",
					"group": "Triggers",
					"name": "HTTP Route",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"iles2zvuw": {
				"id": "iles2zvuw",
				"config": {
					"title": "Print JSON",
					"version": "2",
					"repo": false,
					"data": true
				},
				"x": 1339.0000305175781,
				"y": 32,
				"component": "typerefinery_printjson",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "@TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"groups": [
				{
					"id": "gleruqpps",
					"x": 19,
					"y": 14,
					"width": 498,
					"height": 583,
					"name": "Form Post/Create",
					"background": "rgba(236,134,50,0.3)"
				},
				{
					"id": "glerura9b",
					"x": 19,
					"y": 628.0000381469727,
					"width": 801,
					"height": 366,
					"name": "Form Get/Read",
					"background": "rgba(104,178,91,0.3)"
				},
				{
					"id": "glerutwb4",
					"x": 538.0000305175781,
					"y": 15,
					"width": 499,
					"height": 578,
					"name": "Form Update",
					"background": "rgba(115,39,245,0.3)"
				},
				{
					"id": "gles2yiaz",
					"x": 1060.0000305175781,
					"y": 14,
					"width": 561,
					"height": 578,
					"name": "Form Delete",
					"background": "rgba(231,51,35,0.3)"
				}
			],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"proxypath": "",
		"dtcreated": "2025-02-03T03:34:59.973Z",
		"id": "f1kgfn001yf51d",
		"variables2": {},
		"directory": "C:\\projects\\typerefinery-ai\\typerefinery\\services\\totaljs-flow\\database",
		"sandbox": false,
		"size": 53359
	}
}